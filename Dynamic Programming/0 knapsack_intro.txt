Knapsack
1 0/1 : dp
2 unbounded: dp
3 fractional: GREEDY


3 ways to solve
1 Recursion
2 Momoization/ Bottom Up (Recursion + Table)
3 Top down (Only table)



KNAPSACK IDENTIFICATION: 
1 Always a weight array and some optimal(max/min) asked
2 We always have a choice to accept/reject the element.
3 T[n+1][W+1] ka matrix is formed...n is the size of array....W is the max weight/capacity of knapsack.



To identify dp, ALWAYS:
1 choice 
2 optimal


In recursion: 
1 always think of base condition.....things we can get on minimizing the input
2 write code for the choice diagram
